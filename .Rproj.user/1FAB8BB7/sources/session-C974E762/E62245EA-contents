Signs
```{r}
#greater than or equal
x >= 5
#does not equal
x != 5
#equals
5+3==4
```

Types of Values
```{r}
#Numeric 
c(1,2.2,-0.1)
#Integer 
c(1,2,3)
#Character (string)
c("ACTGAC", "or", "hello")
#
```
Boolean
```{r}
#equal to?
5+2== 5
#is it in this
"What" %in% c("Hello", "What")
#is it not equal to 
200-0!=21
#is this not a number
is.nan(0/0)
is.nan(9/0)
#is there nothing in this?
is.null(c())

#list can be different values vector has to be the same values (characters, integers, etc)

```
Making vectors
vectors have to have same type of entries. Lists can be heterogenous
```{r}
#vectors with names for each value
vect<- c(a=5,b=4,b=6)
#referencing named value in vector
vect["a"]
# saving normal vector
vector<- c(5,4,6)
#Indexing vector values
vector2 <- c(1,2,3,4,5,6)
vector2[3]
#advanced indexing                           returning from x:y
vector2[1:3]
#reorder
vector2[c(6,5,4,3,2,1)]
#reverse elements
vector2[6:1]
#length function
length()
#substring
string1<- c("abcd")
substr(string1,1,3)
```

DataFrame indexing
```{r}
#referencing a column 
df[,1]
df$nameOfColumn
#Reference row 
df[2,]
#Reference cell
df[2,1]
```

Uploading spreadsheets 
```{r}
#CSV
dataframe <- read.csv("//Users//nagendra//Desktop//Bioinformatics//Lecture//Test_V_output.csv", sep=",", header = TRUE )
#TSV
read.csv("//Users//nagendra//Desktop//Bioinformatics//Lecture//FileNAME", sep=" ", header = TRUE )

```
Analyzing data frames
```{r}
mean(vector2)
sd(vector2)
#Counting frequencies in column
sum(dataframe$Total.Score==140)
table(dataframe$Total.Score == 140)

```
Making a new column
```{r}
dataframe$Calc_TotScore <- (dataframe$Kind.Score+(dataframe$Evidence.Score*dataframe$Match.Score))*dataframe$Epistemic.Value
```
Deleting data
```{r}
#columns
df<- subset(dataframe, select = -c(Calc_TotScore))
#rows
dataframeminusrows<- dataframe[1:100,]
dataframe2<-dataframe[c(1,2,3,4,5),]
dataframe112 <- dataframe[-c(1),]
```
Saving dataframe
```{r}
write.csv(dataframe,"//Users//nagendra//Desktop//Bioinformatics//dataframe.csv ")
```

GRAPHING WITH GGPLOT
```{r}
Data_S1 <- read.csv("//Users//nagendra//Desktop//Bioinformatics//Project//Data//Dataset_S1.txt", header = TRUE, sep = ",")
#density plots
ggplot(Data_S1) + geom_density(aes(x=Divergence), fill="black")
#scatter plot
ggplot(Data_S1) + geom_point(aes(x=position, y=diversity)) 
```
Discretization/binning
cut(df$column,# of bins)
##or for assigned bins
cut(df$column,c(5,10,15,20,25))
```{r}
#histogram
ggplot(Data_S1) + geom_bar(aes(x=BinData2))
```
If/else statement
```{r}
x<-"blue"
if(x=="blue"){
  print("blueberries")
} else if(x=="red"){
  print("apple")
} else if(x=="orange"){
  print("Orange")
} else if(x=="yellow"){
  print("bannana")
}else {
  print("nothing")
}
```

while loops
will loop all code withing the while until the condition is met 
```{r}
x <- 0
while(x<=999){
print("...")
  x<- sample(1:1000,1)
}
print("pop goes the weasel")
```

For loops
```{r}
PopWeasel <- c("5", "4", "3", "2","1")
for(each in PopWeasel){
  print("hi")
}
```

while and for loop together
```{r}
x<- 1
while(x!=50){
print("wait")
  x<- sample(1:100,1)
  } 
    if(x==50){
      print("done")
    } 
  
```

Solution for lab4
```{r}
for (each in c(length(LEEs):1)){
  if (length(unique(unlist(strsplit(Lab4Data$Paper.ID[each], ",")))) == 1){
    Lab4Data <- Lab4Data[-c(each),]
  }
}
count()
```



